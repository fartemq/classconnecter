
import { supabase } from "@/integrations/supabase/client";

// –ö–µ—à —Ä–æ–ª–µ–π –≤ —Ä–∞–º–∫–∞—Ö —Å–µ—Å—Å–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
const roleCache = new Map<string, { role: string; timestamp: number }>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ä–æ–ª–µ–π
 */
export const clearRoleCache = () => {
  roleCache.clear();
  console.log("üßπ Role cache cleared");
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
 */
export const getUserRole = async (userId: string): Promise<string | null> => {
  try {
    console.log("üîç Getting role for user:", userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = roleCache.get(userId);
    if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {
      console.log("‚úÖ Role found in cache:", cached.role);
      return cached.role;
    }

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è –∞–¥–º–∏–Ω–∞
    if (userId === "861128e6-be26-48ee-b576-e7accded9f70") {
      const role = "admin";
      roleCache.set(userId, { role, timestamp: Date.now() });
      console.log("üõ°Ô∏è Admin user detected");
      return role;
    }

    // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const timeoutPromise = new Promise<never>((_, reject) => {
      setTimeout(() => reject(new Error("Role fetch timeout")), 5000);
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ RPC —Ñ—É–Ω–∫—Ü–∏—é
    const rolePromise = supabase.rpc('get_current_user_role');

    const { data: role, error } = await Promise.race([rolePromise, timeoutPromise]);

    if (error) {
      console.error("‚ùå Error fetching role via RPC:", error);
      // Fallback –∫ —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const defaultRole = "student";
      roleCache.set(userId, { role: defaultRole, timestamp: Date.now() });
      return defaultRole;
    }

    const finalRole = role || "student";
    
    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    roleCache.set(userId, { role: finalRole, timestamp: Date.now() });
    console.log("‚úÖ Role fetched successfully:", finalRole);
    
    return finalRole;
  } catch (error) {
    console.error("‚ùå Exception in getUserRole:", error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const defaultRole = "student";
    roleCache.set(userId, { role: defaultRole, timestamp: Date.now() });
    return defaultRole;
  }
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
export const checkUserBlocked = async (userId: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .from("profiles")
      .select("is_blocked")
      .eq("id", userId)
      .single();

    if (error || !data) {
      console.log("‚ö†Ô∏è Could not check block status, assuming not blocked");
      return false;
    }

    return data.is_blocked || false;
  } catch (error) {
    console.error("‚ùå Error checking block status:", error);
    return false;
  }
};
