
import React, { useState, useEffect } from "react";
import { User, Session } from "@supabase/supabase-js";
import { supabase } from "@/integrations/supabase/client";
import { AuthContext, AuthContextType } from "./AuthContext";
import { useToast } from "@/hooks/use-toast";
import { getUserRole, clearRoleCache, checkUserBlocked } from "@/services/auth/roleService";

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [userRole, setUserRole] = useState<string | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserSession = async (session: Session | null) => {
    if (!session?.user) {
      console.log("‚ùå No session or user");
      setSession(null);
      setUser(null);
      setUserRole(null);
      return;
    }

    console.log("üîë Processing user session:", session.user.email);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const isBlocked = await checkUserBlocked(session.user.id);
      if (isBlocked) {
        console.log("üö´ User is blocked, signing out");
        await supabase.auth.signOut();
        toast({
          title: "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
          description: "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
          variant: "destructive",
        });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const role = await getUserRole(session.user.id);
      
      if (role) {
        setSession(session);
        setUser(session.user);
        setUserRole(role);
        console.log("‚úÖ User authenticated successfully:", { 
          userId: session.user.id, 
          email: session.user.email,
          role 
        });
      } else {
        console.error("‚ùå Could not get user role");
        // –í—Å–µ —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setSession(session);
        setUser(session.user);
        setUserRole("student");
      }
    } catch (error) {
      console.error("‚ùå Error processing user session:", error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º —Å —Ä–æ–ª—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      setSession(session);
      setUser(session.user);
      setUserRole("student");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
  const login = async (email: string, password: string) => {
    try {
      console.log("üîê Starting login process for:", email);
      
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) {
        console.error("‚ùå Login error:", error);
        let errorMessage = "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
        
        if (error.message.includes("Invalid login credentials")) {
          errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å";
        } else if (error.message.includes("Email not confirmed")) {
          errorMessage = "Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω";
        }
        
        return { 
          success: false, 
          error: errorMessage
        };
      }

      console.log("‚úÖ Login successful, auth state will be handled by listener");
      return { success: true };
    } catch (error) {
      console.error("‚ùå Login exception:", error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ" 
      };
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = async (): Promise<boolean> => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error("‚ùå Logout error:", error);
        return false;
      }
      
      clearRoleCache();
      return true;
    } catch (error) {
      console.error("‚ùå Logout exception:", error);
      return false;
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è)
  const signOut = async (): Promise<void> => {
    try {
      await supabase.auth.signOut();
      clearRoleCache();
    } catch (error) {
      console.error("‚ùå Sign out error:", error);
    }
  };

  useEffect(() => {
    let mounted = true;
    let initTimeout: NodeJS.Timeout;

    const initializeAuth = async () => {
      try {
        console.log("üîÑ Initializing auth...");
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        const { data: { session }, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error("‚ùå Error getting session:", error);
          return;
        }

        if (mounted) {
          await handleUserSession(session);
        }
      } catch (error) {
        console.error("‚ùå Error in initializeAuth:", error);
      } finally {
        if (mounted) {
          console.log("‚èπÔ∏è Auth initialization complete");
          setIsLoading(false);
        }
      }
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π auth —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log("üîÑ Auth state changed:", event);
        
        if (!mounted) return;

        if (event === "SIGNED_IN" && session) {
          setIsLoading(true);
          await handleUserSession(session);
          setIsLoading(false);
        } else if (event === "SIGNED_OUT") {
          console.log("üö™ User signed out");
          setSession(null);
          setUser(null);
          setUserRole(null);
          clearRoleCache();
          setIsLoading(false);
        }
      }
    );

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º auth
    initializeAuth();

    // –¢–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–ª–∞
    initTimeout = setTimeout(() => {
      if (mounted && isLoading) {
        console.log("‚è∞ Auth initialization timeout, stopping loading");
        setIsLoading(false);
      }
    }, 8000); // 8 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

    return () => {
      mounted = false;
      clearTimeout(initTimeout);
      subscription.unsubscribe();
    };
  }, []);

  const value: AuthContextType = {
    user,
    userRole,
    isLoading,
    session,
    signOut,
    setUser,
    setUserRole,
    setIsLoading,
    login,
    logout,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};
