
import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { AuthLayout } from "@/components/auth/AuthLayout";
import { EnhancedLoadingScreen } from "@/components/auth/EnhancedLoadingScreen";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { LoginForm, LoginFormValues } from "@/components/auth/LoginForm";
import { LoginAlerts } from "@/components/auth/LoginAlerts";
import { useAuth } from "@/hooks/auth/useAuth";
import { toast } from "@/hooks/use-toast";

const LoginPage = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { user, userRole, isLoading: authLoading, login } = useAuth();
  const [isLoggingIn, setIsLoggingIn] = useState(false);
  const [needConfirmation, setNeedConfirmation] = useState(false);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [loginStep, setLoginStep] = useState<string>("idle");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–∏ –ª–∏ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  useEffect(() => {
    if (location.state && location.state.needConfirmation) {
      setNeedConfirmation(true);
    }
  }, [location]);

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  useEffect(() => {
    if (user && userRole && !isLoggingIn && !authLoading) {
      console.log("üöÄ Redirecting authenticated user with role:", userRole);
      
      const redirectPath = (() => {
        switch (userRole) {
          case "admin":
          case "moderator":
            return "/admin";
          case "tutor":
            return "/profile/tutor";
          case "student":
            return "/profile/student";
          default:
            return "/profile/student";
        }
      })();

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ UX
      setTimeout(() => {
        navigate(redirectPath, { replace: true });
      }, 500);
    }
  }, [user, userRole, navigate, isLoggingIn, authLoading]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
  const handleLoginSuccess = async (values: LoginFormValues) => {
    if (isLoggingIn) return;
    
    setIsLoggingIn(true);
    setErrorMessage(null);
    setLoginStep("authenticating");
    
    try {
      console.log("üîê Attempting login with:", values.email);
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥–∞
      const loginTimeout = new Promise<never>((_, reject) => {
        setTimeout(() => reject(new Error("Login timeout")), 15000);
      });

      const loginPromise = login(values.email, values.password);
      const result = await Promise.race([loginPromise, loginTimeout]);
      
      if (result?.success) {
        console.log("‚úÖ Login successful");
        setLoginStep("getting_profile");
        
        toast({
          title: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
          description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Stud.rep!",
        });
        
        // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è auth –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        // isLoggingIn –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º redirect
      } else if (result?.error) {
        console.error("‚ùå Login failed:", result.error);
        setErrorMessage(result.error);
        toast({
          title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
          description: result.error,
          variant: "destructive",
        });
        setIsLoggingIn(false);
        setLoginStep("idle");
      }
    } catch (error) {
      console.error("‚ùå Login form error:", error);
      const errorMsg = error instanceof Error && error.message === "Login timeout" 
        ? "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ö–æ–¥–∞" 
        : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ";
      
      setErrorMessage(errorMsg);
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞",
        description: errorMsg,
        variant: "destructive",
      });
      setIsLoggingIn(false);
      setLoginStep("idle");
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
  const handleTimeout = () => {
    console.log("‚è∞ Login process timed out");
    setIsLoggingIn(false);
    setLoginStep("idle");
    setErrorMessage("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    toast({
      title: "–¢–∞–π–º–∞—É—Ç",
      description: "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
      variant: "destructive",
    });
  };

  // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
  const handleRetry = () => {
    setIsLoggingIn(false);
    setLoginStep("idle");
    setErrorMessage(null);
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const getLoadingMessage = () => {
    if (authLoading) return "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏...";
    if (loginStep === "authenticating") return "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...";
    if (loginStep === "getting_profile") return "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...";
    if (isLoggingIn) return "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...";
    if (user && userRole) return "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å...";
    return "–ó–∞–≥—Ä—É–∑–∫–∞...";
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  if (authLoading || isLoggingIn || (user && userRole)) {
    return (
      <AuthLayout>
        <EnhancedLoadingScreen 
          message={getLoadingMessage()}
          timeout={authLoading ? 8000 : 15000}
          onTimeout={handleTimeout}
          onRetry={handleRetry}
          showRetry={!authLoading}
        />
      </AuthLayout>
    );
  }

  return (
    <AuthLayout>
      <Card className="w-full max-w-md mx-auto">
        <CardHeader>
          <CardTitle className="text-2xl font-bold">–í—Ö–æ–¥</CardTitle>
          <CardDescription>
            –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç Stud.rep
          </CardDescription>
        </CardHeader>
        <CardContent>
          <LoginAlerts 
            needConfirmation={needConfirmation}
            loginAttempted={!!errorMessage}
            isLoading={isLoggingIn}
            errorMessage={errorMessage}
          />
          
          <LoginForm 
            onSuccess={handleLoginSuccess}
            isLoading={isLoggingIn}
            setIsLoading={setIsLoggingIn}
            setLoginAttempted={() => {}}
            needConfirmation={needConfirmation}
          />
        </CardContent>
        
        <CardFooter className="flex flex-col text-center text-sm text-gray-500 pt-0">
          <p>
            –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Supabase.
          </p>
        </CardFooter>
      </Card>
    </AuthLayout>
  );
};

export default LoginPage;
